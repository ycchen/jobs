== Welcome to Jobs
Here are the steps and notes of how I create this applications.

# set up application
$ rake db:migrate
$ rake db:seed

1. Add following gems to Gemfile
   
    gem 'jquery-rails'
    gem 'bcrypt-ruby', :require => 'bcrypt'
    gem 'devise'

    group :development, :test do
      gem "rspec-rails", "~> 2.11.4"
      gem 'capybara'
      gem 'nifty-generators'
      gem 'faker'
      gem "populator", "~> 1.0.0"
      gem 'will_paginate'
      gem 'kaminari'
      gem 'sqlite3'
    end


2. create layout using nifty-generators
$ rails g nifty:layout

3. Run the generator for devise
$ rails g devise:install

# generate User model
$ rails g devise User
# rake db:migrate

4. check for routes
$ rake routes


5. create home controller
$ rails g controller home index

6. create jobs
$ rails g nifty:scaffold job title:string job_type:string occupation:string company_name:string location:string url:string description:text apply_information:text deadline:date user_id:integer

add_index :jobs, :user_id

$ rake db:migrate

#Commit

7. generate devise view
$ rails g devise:views users

8. Rails internationalization (I18n)
  a. modify /config/locales/en.yml filde to add all of label
  b. create /config/locales/zh_tw.yml and add the same label but in Chinese
  c. add before_filter :set_locale in controllers/application_controller.rb

9. Error exception handling
  add rescure_from ActiveRecord::RecordNotFound, :with => :render_not_found in application_controller.rb

  def render_not_found
    render template: "shared/404", :status => :not_found
  end

#Commit

10. using t() and raw() methods
raw(): this method outputs without escaping a string. Since escaping tags is now default, this can be used when you don't want Rails to automatically escape tags.
t(): this method is for translate. I18n.translate.

11.
  before_filter :authenticate_user!, :only => [:new, :edit, :update, :destroy]
    OR
  before_filter :authenticate_user!, only: [:new, :edit, :update, :destroy]

Devise controller filters and helpers
  # To set up a controller with user authentication, just add this before_filter:
  before_filter :authenticate_user! 
  
  # To verify if a user is signed in
  user_signed_in?
  # The current signed-in user
  current_user
  # Access the session for this scope
  user_session
  # You can also overwrite after_sign_in_path_for and after_sign_out_path_for to customize your redirect hooks

12.
# enable yaml format on the rails console
$ YAML::ENGINE.yamler ='syck'
$ jobs = Job.all
$ y jobs

13. Console SQL Tips
http://www.codercaste.com/2011/02/11/10-ruby-on-rails-3-tips-that-will-make-you-a-better-rails-programmer/

http://stackoverflow.com/questions/9869870/how-to-get-a-single-columns-values-into-an-array

pluck method: http://apidock.com/rails/ActiveRecord/Calculations/pluck

# console sql tip
# get one column from model
$ Job.pluck(:user_id) # SELECT jobs.user_id FROM jobs
$ Job.uniq.pluck(:user_id) # SELECT DISTINCT user_id FROM jobs
$ Job.where(:confirmed => true).limit(5).pluck(:id)
$ getUserId = Job.find_by_sql("select user_id from jobs")

# update multiple records in rails
# UPDATE "jobs" SET "user_id" = 1 WHERE "jobs"."user_id" = 9
$ Job.update_all({:user_id => 1}, {:user_id => 9}) 

# list table in the console
$ ActiveRecord::Base.connection.tables
$ ActiveRecord::Base.connection.columns("table_name")
$ ActiveRecord::Base.connection.table_structure("jobs")

14. set up production db & precompile assets (css)
# Create and migrate production database
$ rake db:migrate RAILS_ENV=production
$ rake db:seed RAILS_ENV=production

# precompile assets (css) for production environment
$ rake assets:precompile

15. proc and lambda in Ruby
lambad { foo } and proc { foo } is essensially the same thing, you can use both interchangeable in your code.

# example to find all jobs that is still not pass the deadline
scope :online, lambda{ where('deadline is NULL OR deadline > ?', Date.today)}

$ jobs = Job.online
# this will execute the query of
 SELECT COUNT(*) FROM "jobs" WHERE (deadline is NULL OR deadline > '2012-11-06')
$ jobs.count 
# this won't execute the query
$ jobs.size
# You actually have to call .all, .count, .each or .first to get the query to execute.

16. add status to jobs table
$ rails g migration add_status_to_jobs status:string

http://ashleyangell.com/2009/11/form-select-helper-in-ruby-on-rails/
17. select helper: "Select", "select_tag" and "collection_select"
<%= select("payment", "id", {"Male" => "1", "Female" => "2"}) %>
<%= f.select :gender_id, @genders.map{|r| [r.name, r.id]} %>
<%= select_tag "payment", options_for_select(["Male","Female"],"Male") %>
or
<%= select_tag "payment", options_for_select(%w{Male Female}) %>

#multi-select boxes:
<%= select_tag 'payment[]', options_for_select(@genders), :multiple => true, :size => 3 %>

<%= collection_select(:gender, :id, @genders, :id, :name, options= {:propmt => "-Select a gender"}, :class => "gender") %>

<%= f.select :student_id, Student.find(:all, 
:order => "family_name, give_name").collect {|s| [(s.give_name + " " + s.family_name), s.id] %>

<%= f.select :job_type, Job::JOB_TYPE.collect{ |t| [t,t]} %>
OR
<% Job::JOB_TYPE.each do |t| %>
     <%= f.radio_button :job_type, t %> <%= f.label :job_type, t, :value => t, :class => "inline" %>
<% end %>

<%= f.select :occupation, Job::OCCUPATION.collect{|o| [o,o]} %>
OR
<% Job::OCCUPATION.each do |o| %>
  <%= f.radio_button :occupation, o %> <%= f.label :occupation, o, :value => o, :class => "inline" %>
<% end %>

18. Adding pagination using Kaminari gem
You can configure the following default values by overriding these values using Kaminari.config method
default_per_page  # 25 by default
max_per_page      # nil by default
window            # 4 by default
outer_window      # 0 by default
left              # 0 by default
right             # 0 by default
page_method_name  # :page by default
param_name        # :page by default

#generator command
$ rails g kaminari:config
# Kaminari methods does not work on Array. We will need to use Kaminari.paginate_array()
@jobs = Job.all # it will return an Array
@jobs = Kaminari.paginate_array(Job.all).page(params[:page]).per(5)

# Kaminari tips
http://blog.noizeramp.com/2011/10/13/kaminari-tips-and-tricks/

19. render partial(Action View Partials)
http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html
ActionView::PartialRenderer < ActionView::AbstractRenderer
# This would render "jobs/_joblist.html.erb"
<%= render :partial => "joblist" %>

# This would first render "jobs/_joblist.html.erb" with @jobs passed in as the local variable myjobs, then render "jobs/_ad.html.erb"
<%= render :partial => "joblist", :locals => {:myjobs => @jobs} %>
<% @advertisements.each do |ad| %>
  <%= render :partial => "ad", :locals => {:ad => ad} %>
<% end %>

<%= render :partial => "account", :object => @buyer %>
# This would proivde the @buyer object tothe partial, available under the local variable account and is equivalent to:
<%= render :partial => "account", :locals => { :account => @buyer } %>

<%= render :partial => "account", :object => @buyer, :as => 'user' %>
this is equivalent to
<%= render :partial => "account", :locals => { :user => @buyer } %>

19. Add endless page
# Added endless.js.coffee
# Make sure the Job#index controller handle JavaScript inside of respond_to block
# Added partial in views/jobs/index.html.erb
<%= render :partial => 'joblist' %> # render template Jobs/_joblist.html.erb
# Added index.js.erb to handle Ajax content
$('#joblist_table').append('<%= j render :partial => 'joblist' %>'); # append Ajax content to joblist_table, by render jobs/_joblist.html.erb with @jobs object
$('.pagination').replaceWith('<%= j paginate(@jobs) %>'); #replace .pagination content with <%= j paginate(@jobs) %>

# Create REST API versioning
# using namespace inside of the routes.rb and create a nested routes like api/v1
# create a folder called "api/v1" inside of controllers folder
# create a file called "posts_controller.rb" inside of /api/vi folder
# api/v1/posts_controller.rb content looks like this

 module Api
  module V1
    class JobsController < ApplicationController
      respond_to :json

      def index
        respond_with Jobs.all
      end
     end
  end
 end

# Test it with http://localhost:3000/api/v1/jobs.json
# It should return a list of json data with all jobs
# This URL requires us specify the JSON format and we can make JSON the default format 
# by adding "defaults" option in the routes like this

  namespace :api, defaults: {format: 'json'} do
    namespace :v1 do
      resources :products
    end
  end

# api/v1/jobs_controller.rb
# adding following class to handle adding additional information 
# to the json data set, in this case is to add "created_on" additional column
# and the data is base on created_at column
class Job < :: Job
  def as_json(options={})
    super.merge(created_on: created_at.to_date )  
  end
end

# Release v2 we just need to copy the app/controllers/api/v1 to app/controllers/api/v2
# Update routes.rb to add api/v2 , copy namespace :v1 block to :v2 block
  namespace :api, defaults: {format: 'json'} do
    namespace :v1 do
      resources :jobs
    end
    namespace :v2 do
      resources :jobs
    end
  end

# Removing Version Numbers from the URL
# By change namespace to scope on the routes.rb file
  namespace :api, defaults: {format: 'json'} do
    scope module: :v1, constraints: ApiConstraints.new(version: 1) do
      resources :jobs
    end
    scope module: :v2, constraints: ApiConstraints.new(version: 2, default: true) do
      resources :jobs
    end
  end
# create app/lib/api_constraints.rb
class ApiConstraints
  def initialize(options)
    @version = options[:version]
    @default = options[:default]
  end
    
  def matches?(req)
    @default || req.headers['Accept'].include?("application/vnd.example.v#{@version}")
  end
end
